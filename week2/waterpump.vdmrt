class Steam_Boiler
    
values
    C : real = 1000;
    P : real = 10;
    V : real = 50;
    N1 : real = 600;
    
instance variables
    now : seq of real;
    qe : seq of real;
    public pump_state: seq of nat;
    public valve_state: seq of nat;

operations

    public Steam_Boiler: () ==> Steam_Boiler
    Steam_Boiler() == (
        now := [0];
        qe:= [500];
        valve_state := [0];
        pump_state := [0];
    );

    public ValveOn: () ==> ()
    ValveOn() == duration(0) (
        valve_state := [1] ^ valve_state;
        now := [hd now] ^ now;
        qe := [hd qe] ^ qe;
        pump_state := [hd pump_state] ^ pump_state;
    );

    public ValveOff: () ==> ()
    ValveOff() == duration(0) (
        valve_state := [0] ^ valve_state;
        now := [hd now] ^ now;
        qe := [hd qe] ^ qe;
        pump_state := [hd pump_state] ^ pump_state;
    );

    public PumpOn: () ==> ()
    PumpOn() == duration(0) (
        pump_state := [1] ^ pump_state;
        now := [hd now] ^ now;
        qe := [hd qe] ^ qe;
        valve_state := [hd valve_state] ^ pump_state;
    );

    public PumpOff: () ==> ()
    PumpOff() == duration(0) (
        pump_state := [0] ^ pump_state;
        now := [hd now] ^ now;
        qe := [hd qe] ^ qe;
        valve_state := [hd valve_state] ^ pump_state;
    );

    public Step: (real) ==> ()
    Step(delta) == duration(0) (
        dcl current_qe : real := hd qe;
        dcl current_pump_state : real := hd pump_state;
        dcl current_valve_state : real := hd valve_state;


        dcl delta_qe : real := (current_pump_state * P) - (current_valve_state * V);
        dcl next_qe : real := current_qe + delta_qe * delta;

        if (next_qe < 0) then (next_qe := 0);

        qe := [next_qe] ^ qe;
        now := [hd now + delta] ^ now;
        valve_state := [hd valve_state] ^ valve_state;
        pump_state := [hd pump_state] ^ pump_state;
    )
    post 0 <= hd qe and hd qe <= C;


end Steam_Boiler